/*
Copyright 2022 The Katalyst Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubewharf/katalyst-api/pkg/apis/config/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// HaloCustomConfigLister helps list HaloCustomConfigs.
// All objects returned here must be treated as read-only.
type HaloCustomConfigLister interface {
	// List lists all HaloCustomConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HaloCustomConfig, err error)
	// HaloCustomConfigs returns an object that can list and get HaloCustomConfigs.
	HaloCustomConfigs(namespace string) HaloCustomConfigNamespaceLister
	HaloCustomConfigListerExpansion
}

// haloCustomConfigLister implements the HaloCustomConfigLister interface.
type haloCustomConfigLister struct {
	indexer cache.Indexer
}

// NewHaloCustomConfigLister returns a new HaloCustomConfigLister.
func NewHaloCustomConfigLister(indexer cache.Indexer) HaloCustomConfigLister {
	return &haloCustomConfigLister{indexer: indexer}
}

// List lists all HaloCustomConfigs in the indexer.
func (s *haloCustomConfigLister) List(selector labels.Selector) (ret []*v1alpha1.HaloCustomConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HaloCustomConfig))
	})
	return ret, err
}

// HaloCustomConfigs returns an object that can list and get HaloCustomConfigs.
func (s *haloCustomConfigLister) HaloCustomConfigs(namespace string) HaloCustomConfigNamespaceLister {
	return haloCustomConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// HaloCustomConfigNamespaceLister helps list and get HaloCustomConfigs.
// All objects returned here must be treated as read-only.
type HaloCustomConfigNamespaceLister interface {
	// List lists all HaloCustomConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.HaloCustomConfig, err error)
	// Get retrieves the HaloCustomConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.HaloCustomConfig, error)
	HaloCustomConfigNamespaceListerExpansion
}

// haloCustomConfigNamespaceLister implements the HaloCustomConfigNamespaceLister
// interface.
type haloCustomConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all HaloCustomConfigs in the indexer for a given namespace.
func (s haloCustomConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.HaloCustomConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.HaloCustomConfig))
	})
	return ret, err
}

// Get retrieves the HaloCustomConfig from the indexer for a given namespace and name.
func (s haloCustomConfigNamespaceLister) Get(name string) (*v1alpha1.HaloCustomConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("halocustomconfig"), name)
	}
	return obj.(*v1alpha1.HaloCustomConfig), nil
}
