/*
Copyright 2022 The Katalyst Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/kubewharf/katalyst-api/pkg/apis/resourceportrait/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ResourcePortraitLister helps list ResourcePortraits.
// All objects returned here must be treated as read-only.
type ResourcePortraitLister interface {
	// List lists all ResourcePortraits in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResourcePortrait, err error)
	// ResourcePortraits returns an object that can list and get ResourcePortraits.
	ResourcePortraits(namespace string) ResourcePortraitNamespaceLister
	ResourcePortraitListerExpansion
}

// resourcePortraitLister implements the ResourcePortraitLister interface.
type resourcePortraitLister struct {
	indexer cache.Indexer
}

// NewResourcePortraitLister returns a new ResourcePortraitLister.
func NewResourcePortraitLister(indexer cache.Indexer) ResourcePortraitLister {
	return &resourcePortraitLister{indexer: indexer}
}

// List lists all ResourcePortraits in the indexer.
func (s *resourcePortraitLister) List(selector labels.Selector) (ret []*v1alpha1.ResourcePortrait, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourcePortrait))
	})
	return ret, err
}

// ResourcePortraits returns an object that can list and get ResourcePortraits.
func (s *resourcePortraitLister) ResourcePortraits(namespace string) ResourcePortraitNamespaceLister {
	return resourcePortraitNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ResourcePortraitNamespaceLister helps list and get ResourcePortraits.
// All objects returned here must be treated as read-only.
type ResourcePortraitNamespaceLister interface {
	// List lists all ResourcePortraits in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ResourcePortrait, err error)
	// Get retrieves the ResourcePortrait from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ResourcePortrait, error)
	ResourcePortraitNamespaceListerExpansion
}

// resourcePortraitNamespaceLister implements the ResourcePortraitNamespaceLister
// interface.
type resourcePortraitNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ResourcePortraits in the indexer for a given namespace.
func (s resourcePortraitNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ResourcePortrait, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ResourcePortrait))
	})
	return ret, err
}

// Get retrieves the ResourcePortrait from the indexer for a given namespace and name.
func (s resourcePortraitNamespaceLister) Get(name string) (*v1alpha1.ResourcePortrait, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("resourceportrait"), name)
	}
	return obj.(*v1alpha1.ResourcePortrait), nil
}
